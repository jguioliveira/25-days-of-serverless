{"version":3,"sources":["logo.svg","components/ServiceList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ServiceList","props","state","services","errorMessage","hubConnection","axios","get","then","response","setState","data","console","log","catch","error","signalR","withUrl","build","this","prevState","start","err","on","updatedServices","Array","isArray","forEach","updatedService","service","find","s","id","status","Status","class","scope","length","map","key","name","region","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"uKAAAA,EAAOC,QAAU,IAA0B,kC,8KCqG5BC,E,kDA9FX,WAAYC,GAAQ,IAAD,uBACf,cAAMA,IAEDC,MAAQ,CACTC,SAAU,GACVC,aAAc,KACdC,cAAe,MANJ,S,gEAYE,IAAD,OAEhBC,IAAMC,IAAI,4EACLC,MAAK,SAAAC,GACF,EAAKC,SAAS,CACVP,SAAUM,EAASE,OAEvBC,QAAQC,IAAIJ,MAEfK,OAAM,SAAAC,GACH,EAAKL,SAAS,CACVN,aAAcW,IAElBH,QAAQC,IAAIE,MAGpB,IAAMV,GAAgB,IAAIW,KACrBC,QAAQ,mEACRC,QAELC,KAAKT,SAAS,CAAEL,kBAEhBc,KAAKT,UAAS,SAACU,GACXA,EAAUf,cACLgB,QACAb,MAAK,kBAAMI,QAAQC,IAAI,0BACvBC,OAAM,SAAAQ,GAAG,OAAIV,QAAQC,IAAI,6CAE9BO,EAAUf,cAAckB,GAAG,WAAW,SAAAC,GAClC,IAAIrB,EAAW,EAAKD,MAAMC,SAE1B,GAAIsB,MAAMC,QAAQF,GACdA,EAAgBG,SAAQ,SAAAC,GACpB,IAAIC,EAAU1B,EAAS2B,MAAK,SAAAC,GAAC,OAAIA,EAAEC,KAAOJ,EAAeI,MACrDH,IAASA,EAAQI,OAASL,EAAeM,eAGhD,CACD,IAAIL,EAAU1B,EAAS2B,MAAK,SAAAC,GAAC,OAAIA,EAAEC,KAAOR,EAAgBQ,MACtDH,IAASA,EAAQI,OAAST,EAAgBU,QAGlD,EAAKxB,SAAS,CAAEP,qB,+BAMlB,IACEA,EAAagB,KAAKjB,MAAlBC,SACR,OACI,6BACI,gDACA,2BAAOgC,MAAM,SACT,2BAAOA,MAAM,cACT,4BACI,wBAAIC,MAAM,OAAV,MACA,wBAAIA,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,UACA,wBAAIA,MAAM,OAAV,YAGR,+BAEQjC,EAASkC,OACLlC,EAASmC,KAAI,SAAAT,GAAO,OAChB,wBAAIU,IAAKV,EAAQG,IACb,4BAAKH,EAAQG,IACb,4BAAKH,EAAQW,MACb,4BAAKX,EAAQY,QACb,4BAAKZ,EAAQI,YAGrB,Y,GAvFNS,aCQXC,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjD,MAAK,SAAAkD,GACJA,EAAaC,gBAEd7C,OAAM,SAAAC,GACLH,QAAQG,MAAMA,EAAM6C,c","file":"static/js/main.c4d994c8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\r\nimport axios from 'axios'\r\nimport * as signalR from '@aspnet/signalr'\r\n\r\n\r\nclass ServiceList extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            services: [],\r\n            errorMessage: null,\r\n            hubConnection: null\r\n        }\r\n\r\n        let teste = [];\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        axios.get('https://25-days-of-serverless-challenge-8.azurewebsites.net/api/services')\r\n            .then(response => {\r\n                this.setState({\r\n                    services: response.data\r\n                })\r\n                console.log(response)\r\n            })\r\n            .catch(error => {\r\n                this.setState({\r\n                    errorMessage: error\r\n                })\r\n                console.log(error)\r\n            });\r\n\r\n        const hubConnection = new signalR.HubConnectionBuilder()\r\n            .withUrl('https://25-days-of-serverless-challenge-8.azurewebsites.net/api')\r\n            .build();\r\n\r\n        this.setState({ hubConnection });\r\n\r\n        this.setState((prevState) => {\r\n            prevState.hubConnection\r\n                .start()\r\n                .then(() => console.log('Connection started!'))\r\n                .catch(err => console.log('Error while establishing connection :('));\r\n\r\n            prevState.hubConnection.on('updated', updatedServices => {\r\n                let services = this.state.services;\r\n\r\n                if (Array.isArray(updatedServices)) {\r\n                    updatedServices.forEach(updatedService => {\r\n                        let service = services.find(s => s.id === updatedService.id);\r\n                        if (service) service.status = updatedService.Status;\r\n                    })\r\n                }\r\n                else {\r\n                    let service = services.find(s => s.id === updatedServices.id);\r\n                    if (service) service.status = updatedServices.Status;\r\n                }\r\n\r\n                this.setState({ services });\r\n            });\r\n        });\r\n    }\r\n\r\n\r\n    render() {\r\n        const { services } = this.state\r\n        return (\r\n            <div>\r\n                <h3>List of Services</h3>\r\n                <table class=\"table\">\r\n                    <thead class=\"thead-dark\">\r\n                        <tr>\r\n                            <th scope=\"col\">Id</th>\r\n                            <th scope=\"col\">Name</th>\r\n                            <th scope=\"col\">Region</th>\r\n                            <th scope=\"col\">Status</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            services.length ?\r\n                                services.map(service =>\r\n                                    <tr key={service.id}>\r\n                                        <td>{service.id}</td>\r\n                                        <td>{service.name}</td>\r\n                                        <td>{service.region}</td>\r\n                                        <td>{service.status}</td>\r\n                                    </tr>\r\n                                ) :\r\n                                null\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ServiceList\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ServiceList from './components/ServiceList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ServiceList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}